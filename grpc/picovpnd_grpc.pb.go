// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: grpc/picovpnd.proto

package picovpnd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpenConnectService_UserAdd_FullMethodName            = "/helloworld.OpenConnectService/UserAdd"
	OpenConnectService_UserLock_FullMethodName           = "/helloworld.OpenConnectService/UserLock"
	OpenConnectService_UserUnlock_FullMethodName         = "/helloworld.OpenConnectService/UserUnlock"
	OpenConnectService_UserDelete_FullMethodName         = "/helloworld.OpenConnectService/UserDelete"
	OpenConnectService_UserChangePassword_FullMethodName = "/helloworld.OpenConnectService/UserChangePassword"
	OpenConnectService_GetCertAndKey_FullMethodName      = "/helloworld.OpenConnectService/GetCertAndKey"
)

// OpenConnectServiceClient is the client API for OpenConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenConnectServiceClient interface {
	UserAdd(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*Response, error)
	UserLock(ctx context.Context, in *UserLockRequest, opts ...grpc.CallOption) (*Response, error)
	UserUnlock(ctx context.Context, in *UserUnlockRequest, opts ...grpc.CallOption) (*Response, error)
	UserDelete(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*Response, error)
	UserChangePassword(ctx context.Context, in *UserChangePasswordRequest, opts ...grpc.CallOption) (*Response, error)
	GetCertAndKey(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*CertAndKeyResponse, error)
}

type openConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenConnectServiceClient(cc grpc.ClientConnInterface) OpenConnectServiceClient {
	return &openConnectServiceClient{cc}
}

func (c *openConnectServiceClient) UserAdd(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, OpenConnectService_UserAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openConnectServiceClient) UserLock(ctx context.Context, in *UserLockRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, OpenConnectService_UserLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openConnectServiceClient) UserUnlock(ctx context.Context, in *UserUnlockRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, OpenConnectService_UserUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openConnectServiceClient) UserDelete(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, OpenConnectService_UserDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openConnectServiceClient) UserChangePassword(ctx context.Context, in *UserChangePasswordRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, OpenConnectService_UserChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openConnectServiceClient) GetCertAndKey(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*CertAndKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CertAndKeyResponse)
	err := c.cc.Invoke(ctx, OpenConnectService_GetCertAndKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenConnectServiceServer is the server API for OpenConnectService service.
// All implementations must embed UnimplementedOpenConnectServiceServer
// for forward compatibility.
type OpenConnectServiceServer interface {
	UserAdd(context.Context, *UserAddRequest) (*Response, error)
	UserLock(context.Context, *UserLockRequest) (*Response, error)
	UserUnlock(context.Context, *UserUnlockRequest) (*Response, error)
	UserDelete(context.Context, *UserDeleteRequest) (*Response, error)
	UserChangePassword(context.Context, *UserChangePasswordRequest) (*Response, error)
	GetCertAndKey(context.Context, *AuthenticateRequest) (*CertAndKeyResponse, error)
	mustEmbedUnimplementedOpenConnectServiceServer()
}

// UnimplementedOpenConnectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenConnectServiceServer struct{}

func (UnimplementedOpenConnectServiceServer) UserAdd(context.Context, *UserAddRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdd not implemented")
}
func (UnimplementedOpenConnectServiceServer) UserLock(context.Context, *UserLockRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLock not implemented")
}
func (UnimplementedOpenConnectServiceServer) UserUnlock(context.Context, *UserUnlockRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUnlock not implemented")
}
func (UnimplementedOpenConnectServiceServer) UserDelete(context.Context, *UserDeleteRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedOpenConnectServiceServer) UserChangePassword(context.Context, *UserChangePasswordRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChangePassword not implemented")
}
func (UnimplementedOpenConnectServiceServer) GetCertAndKey(context.Context, *AuthenticateRequest) (*CertAndKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertAndKey not implemented")
}
func (UnimplementedOpenConnectServiceServer) mustEmbedUnimplementedOpenConnectServiceServer() {}
func (UnimplementedOpenConnectServiceServer) testEmbeddedByValue()                            {}

// UnsafeOpenConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenConnectServiceServer will
// result in compilation errors.
type UnsafeOpenConnectServiceServer interface {
	mustEmbedUnimplementedOpenConnectServiceServer()
}

func RegisterOpenConnectServiceServer(s grpc.ServiceRegistrar, srv OpenConnectServiceServer) {
	// If the following call pancis, it indicates UnimplementedOpenConnectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenConnectService_ServiceDesc, srv)
}

func _OpenConnectService_UserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConnectServiceServer).UserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenConnectService_UserAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConnectServiceServer).UserAdd(ctx, req.(*UserAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenConnectService_UserLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConnectServiceServer).UserLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenConnectService_UserLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConnectServiceServer).UserLock(ctx, req.(*UserLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenConnectService_UserUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConnectServiceServer).UserUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenConnectService_UserUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConnectServiceServer).UserUnlock(ctx, req.(*UserUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenConnectService_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConnectServiceServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenConnectService_UserDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConnectServiceServer).UserDelete(ctx, req.(*UserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenConnectService_UserChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConnectServiceServer).UserChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenConnectService_UserChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConnectServiceServer).UserChangePassword(ctx, req.(*UserChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenConnectService_GetCertAndKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConnectServiceServer).GetCertAndKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenConnectService_GetCertAndKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConnectServiceServer).GetCertAndKey(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenConnectService_ServiceDesc is the grpc.ServiceDesc for OpenConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.OpenConnectService",
	HandlerType: (*OpenConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAdd",
			Handler:    _OpenConnectService_UserAdd_Handler,
		},
		{
			MethodName: "UserLock",
			Handler:    _OpenConnectService_UserLock_Handler,
		},
		{
			MethodName: "UserUnlock",
			Handler:    _OpenConnectService_UserUnlock_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _OpenConnectService_UserDelete_Handler,
		},
		{
			MethodName: "UserChangePassword",
			Handler:    _OpenConnectService_UserChangePassword_Handler,
		},
		{
			MethodName: "GetCertAndKey",
			Handler:    _OpenConnectService_GetCertAndKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/picovpnd.proto",
}
